using RufinasBlog.Library.Abstracts;
using RufinasBlog.Library.Entities;
using RufinasBlog.Library.Enums;
using System.Collections.Generic;
using System;

namespace RufinasBlog
{
    class Program
    {
        static void Main(string[] args)
        {

            // Создание объекта
            //Blog blog = new Blog();

            //создаем данные
            StudyBlog studyBlog = new StudyBlog("C# введение в ООП", BlogType.Study);
            studyBlog.Body = @"Основные понятия объектно-ориентированного программирования:инкапсуляция, наследование и полиморфизм. Эпизодическое использование технологии ООП заключается в разработке отдельных, не связанных между собой классов и использовании их как необходимых программисту базовых типов данных, отсутствующих в языке. При этом общая структура программы остается традиционной. (от функции к функции).

                                Объектно - ориентированное программирование(ООП) это совокупность понятий(класс, объект, инкапсуляция, полиморфизм, наследование), приемов их использования при проектировании программ, а Си++ - инструмент этой технологии.

                                Строгое следование технологии ООП предполагает, что любая функция в программе представляет собой метод для объекта некоторого класса. Это не означает, что нужно вводить в программу какие попало классы ради того, чтобы написать необходимые для работы функции.Наоборот, класс должен формироваться в программе естественным образом, как только в ней возникает необходимость описания новых физических предметов или абстрактных понятий(объектов программирования).С другой стороны, каждый новый шаг в разработке алгоритма также должен представлять собой разработку нового класса на основе уже существующих. В конце концов вся программа в таком виде представляет собой объект некоторого класса с единственным методом run(выполнить).Именно этот переход(а не понятия класса и объекта, как таковые) создает психологический барьер перед программистом, осваивающим технологию ООП.

                                Программирование от класса к классу включает в себя ряд новых понятий. Прежде всего, это -инкапсуляция данных, то есть логическое связывание данных с конкретной операцией. Инкапсуляция данных означает, что данные являются не глобальными - доступными всей программе, а локальными - доступными только малой ее части. Инкапсуляция автоматически подразумевает защиту данных.Для этого в структуре class используется спецификатор раздела private, содержащий данные и методы, доступные только для самого класса.Если данные и методы содержатся в разделе public, они доступны извне класса.Раздел protected содержит данные и методы, доступные из класса и любого его производного класса.Наличие последних позволяет говорить об иерархии классов, где есть классы - родители - шаблоны для создания классов - потомков.Объекты, полученные из описания класса, называют экземплярами этого класса.

                                Вторым по значимости понятием является наследование.Новый, или производный класс может быть определен на основе уже имеющегося, или базового. При этом новый класс сохраняет все свойства старого: данные объекта базового класса включаются в данные объекта производного, а методы базового класса могут быть вызваны для объекта производного класса, причем они будут выполняться над данными включенного в него объекта базового класса. Иначе говоря, новый класс наследует как данные старого класса, так и методы их обработки.Если объект наследует свои свойства от одного родителя, то говорят об одиночном наследовании.Если же объект наследует атрибуты от нескольких базовых классов, то говорят о множественном наследовании.Простой пример наследования - определение структуры, отдельный член которой является ранее определенной структурой.

                                Третьим по значимости понятием является полиморфизм. Он основывается на возможности включения в данные объекта также и информации о методах их обработки (в виде указателей на функции). Принципиально важно, что такой объект становится самодостаточны. Будучи доступным в некоторой точке программы, даже при отсутствии полной информации о его типе, он всегда может корректно вызвать свойственные ему методы.Полиморфной называется функция, независимо определенная в каждом из группы производных классов и имеющая в них общее имя. Полиморфная функция обладает тем свойством, что при отсутствии полной информации о том, объект какого из производных классов в данный момент обрабатывается, она тем не менее корректно вызывается в том виде, к каком она была определена для данного конкретного класса.Практический смысл полиморфизма заключается в том, что он позволяет посылать общее сообщение о сборе данных любому классу, причем и родительский класс, и классы-потомки ответят на сообщение соответствующим образом, поскольку производные классы содержат дополнительную информацию. Программист может сделать регулярным процесс обработки несовместимых объектов различных типов при наличии у них такого полиморфного метода.";
            Console.WriteLine(studyBlog);
            
            SetEnters();
            Blog cookieBlog = new CookBlog("Как приготовить блинчики", BlogType.Cook, new Dictionary<string, string>() {
                { "Молоко", "5 стаканов" },
                { "Яйца", "2 шт" },
                { "Мука", "3 стакана" }});
            cookieBlog.Body = "Не стану тут долго расписывать, что же такое блины, думаю, вы и так все знаете. Блины бывают дрожжевые и бездрожжевые, мы будем готовить простые бездрожжевые блины на молоке. У меня вопрос лишь в том, как правильно их назвать, блины или всё же блинчики, если речь идёт именно о тонких блинах. Я всегда считала, что блин — это тонко пожаренное тесто на сковороде, а блинчик — это блин, в который завернули начинку. Однако покопавшись в истории этого блюда, я склоняюсь к тому, что мы всё же приготовим с вами сегодня тонкие блинчики на молоке. Потому как традиционные русские блины пеклись из густого дрожжевого теста и были довольно толстые. Тонкие же блины пришли к нам из Франции, и стали называться блинчиками, они могут быть как с начинкой, так и без неё, ведь только в тонкий блинчик вы сможете завернуть начинку. И хотя со словом, вроде, всё понятно, я иногда по-прежнему продолжаю называть тонкие блинчики — блинами."
                              +"А теперь непосредственно про рецепт.Когда речь заходит о тонких блинчиках, наверное, самый большой спор состоит в том, класть в тесто соду или разрыхлитель, или нет.Так вот, в пресное блинное тесто не кладутся никакие разрыхлители, блинчики получаются тонкие за счёт консистенции теста, а дырочки на них у вас получатся, если вы просто хорошо прогреете сковородку. Вообще, в этом рецепте я постараюсь рассказать вам о разных мелочах и тонкостях приготовления тонких блинчиков на молоке.Надеюсь, после этого у вас всё получится, ведь ничего сложного в этом нет.";
            Console.WriteLine(cookieBlog);

            //переопределение метода
            SetEnters();
            Console.WriteLine(studyBlog.GetShortBlog());

            // переопределение метода
            SetEnters();
            Console.WriteLine(cookieBlog.GetShortBlog());

            // сокрытие
            SetEnters();
            Console.WriteLine(studyBlog.ToString());
        }

        public static void SetEnters()
        {
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
        }
    }
}
